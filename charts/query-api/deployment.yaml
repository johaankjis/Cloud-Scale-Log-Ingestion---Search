apiVersion: apps/v1
kind: Deployment
metadata:
  name: query-api
  namespace: log-pipeline
  labels:
    app: query-api
    component: api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: query-api
  template:
    metadata:
      labels:
        app: query-api
        component: api
    spec:
      containers:
      - name: query-api
        image: query-api:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        - name: CLICKHOUSE_HOST
          value: "clickhouse"
        - name: CLICKHOUSE_PORT
          value: "9000"
        - name: CLICKHOUSE_DATABASE
          value: "logs"
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: query-api
  namespace: log-pipeline
  labels:
    app: query-api
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: query-api
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: query-api-hpa
  namespace: log-pipeline
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: query-api
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 75
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: query-api-pdb
  namespace: log-pipeline
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: query-api
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: query-api-ingress
  namespace: log-pipeline
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  tls:
  - hosts:
    - logs-api.example.com
    secretName: query-api-tls
  rules:
  - host: logs-api.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: query-api
            port:
              number: 80
